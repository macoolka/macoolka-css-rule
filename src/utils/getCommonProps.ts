import { pick } from 'macoolka-object';
const StandardProperties = [
    "alignContent",
    "alignItems",
    "alignSelf",
    "animationDelay",
    "animationDirection",
    "animationDuration",
    "animationFillMode",
    "animationIterationCount",
    "animationName",
    "animationPlayState",
    "animationTimingFunction",
    "appearance",
    "backdropFilter",
    "backfaceVisibility",
    "backgroundAttachment",
    "backgroundBlendMode",
    "backgroundClip",
    "backgroundColor",
    "backgroundImage",
    "backgroundOrigin",
    "backgroundPosition",
    "backgroundPositionX",
    "backgroundPositionY",
    "backgroundRepeat",
    "backgroundSize",
    "blockOverflow",
    "blockSize",
    "borderBlockEndColor",
    "borderBlockEndStyle",
    "borderBlockEndWidth",
    "borderBlockStartColor",
    "borderBlockStartStyle",
    "borderBlockStartWidth",
    "borderBottomColor",
    "borderBottomLeftRadius",
    "borderBottomRightRadius",
    "borderBottomStyle",
    "borderBottomWidth",
    "borderCollapse",
    "borderImageOutset",
    "borderImageRepeat",
    "borderImageSlice",
    "borderImageSource",
    "borderImageWidth",
    "borderInlineEndColor",
    "borderInlineEndStyle",
    "borderInlineEndWidth",
    "borderInlineStartColor",
    "borderInlineStartStyle",
    "borderInlineStartWidth",
    "borderLeftColor",
    "borderLeftStyle",
    "borderLeftWidth",
    "borderRightColor",
    "borderRightStyle",
    "borderRightWidth",
    "borderSpacing",
    "borderTopColor",
    "borderTopLeftRadius",
    "borderTopRightRadius",
    "borderTopStyle",
    "borderTopWidth",
    "bottom",
    "boxDecorationBreak",
    "boxShadow",
    "boxSizing",
    "breakAfter",
    "breakBefore",
    "breakInside",
    "captionSide",
    "caretColor",
    "clear",
    "clipPath",
    "color",
    "colorAdjust",
    "columnCount",
    "columnFill",
    "columnGap",
    "columnRuleColor",
    "columnRuleStyle",
    "columnRuleWidth",
    "columnSpan",
    "columnWidth",
    "contain",
    "content",
    "counterIncrement",
    "counterReset",
    "cursor",
    "direction",
    "display",
    "emptyCells",
    "filter",
    "flexBasis",
    "flexDirection",
    "flexGrow",
    "flexShrink",
    "flexWrap",
    "float",
    "fontFamily",
    "fontFeatureSettings",
    "fontKerning",
    "fontLanguageOverride",
    "fontOpticalSizing",
    "fontSize",
    "fontSizeAdjust",
    "fontStretch",
    "fontStyle",
    "fontSynthesis",
    "fontVariant",
    "fontVariantCaps",
    "fontVariantEastAsian",
    "fontVariantLigatures",
    "fontVariantNumeric",
    "fontVariantPosition",
    "fontVariationSettings",
    "fontWeight",
    "gridAutoColumns",
    "gridAutoFlow",
    "gridAutoRows",
    "gridColumnEnd",
    "gridColumnStart",
    "gridRowEnd",
    "gridRowStart",
    "gridTemplateAreas",
    "gridTemplateColumns",
    "gridTemplateRows",
    "hangingPunctuation",
    "height",
    "hyphens",
    "imageOrientation",
    "imageRendering",
    "imageResolution",
    "initialLetter",
    "inlineSize",
    "insetBlockEnd",
    "insetBlockStart",
    "insetInlineEnd",
    "insetInlineStart",
    "isolation",
    "justifyContent",
    "justifyItems",
    "justifySelf",
    "left",
    "letterSpacing",
    "lineBreak",
    "lineHeight",
    "lineHeightStep",
    "listStyleImage",
    "listStylePosition",
    "listStyleType",
    "marginBlockEnd",
    "marginBlockStart",
    "marginBottom",
    "marginInlineEnd",
    "marginInlineStart",
    "marginLeft",
    "marginRight",
    "marginTop",
    "maskBorderMode",
    "maskBorderOutset",
    "maskBorderRepeat",
    "maskBorderSlice",
    "maskBorderSource",
    "maskBorderWidth",
    "maskClip",
    "maskComposite",
    "maskImage",
    "maskMode",
    "maskOrigin",
    "maskPosition",
    "maskRepeat",
    "maskSize",
    "maskType",
    "maxBlockSize",
    "maxHeight",
    "maxInlineSize",
    "maxLines",
    "maxWidth",
    "minBlockSize",
    "minHeight",
    "minInlineSize",
    "minWidth",
    "mixBlendMode",
    "motionDistance",
    "motionPath",
    "motionRotation",
    "objectFit",
    "objectPosition",
    "offsetAnchor",
    "offsetDistance",
    "offsetPath",
    "offsetPosition",
    "offsetRotate",
    "offsetRotation",
    "opacity",
    "order",
    "orphans",
    "outlineColor",
    "outlineOffset",
    "outlineStyle",
    "outlineWidth",
    "overflow",
    "overflowAnchor",
    "overflowBlock",
    "overflowClipBox",
    "overflowInline",
    "overflowWrap",
    "overflowX",
    "overflowY",
    "overscrollBehavior",
    "overscrollBehaviorX",
    "overscrollBehaviorY",
    "paddingBlockEnd",
    "paddingBlockStart",
    "paddingBottom",
    "paddingInlineEnd",
    "paddingInlineStart",
    "paddingLeft",
    "paddingRight",
    "paddingTop",
    "pageBreakAfter",
    "pageBreakBefore",
    "pageBreakInside",
    "paintOrder",
    "perspective",
    "perspectiveOrigin",
    "placeContent",
    "pointerEvents",
    "position",
    "quotes",
    "resize",
    "right",
    "rotate",
    "rowGap",
    "rubyAlign",
    "rubyMerge",
    "rubyPosition",
    "scale",
    "scrollBehavior",
    "scrollSnapType",
    "shapeImageThreshold",
    "shapeMargin",
    "shapeOutside",
    "tabSize",
    "tableLayout",
    "textAlign",
    "textAlignLast",
    "textCombineUpright",
    "textDecorationColor",
    "textDecorationLine",
    "textDecorationSkip",
    "textDecorationSkipInk",
    "textDecorationStyle",
    "textEmphasisColor",
    "textEmphasisPosition",
    "textEmphasisStyle",
    "textIndent",
    "textJustify",
    "textOrientation",
    "textOverflow",
    "textRendering",
    "textShadow",
    "textSizeAdjust",
    "textTransform",
    "textUnderlinePosition",
    "top",
    "touchAction",
    "transform",
    "transformBox",
    "transformOrigin",
    "transformStyle",
    "transitionDelay",
    "transitionDuration",
    "transitionProperty",
    "transitionTimingFunction",
    "translate",
    "unicodeBidi",
    "userSelect",
    "verticalAlign",
    "visibility",
    "whiteSpace",
    "widows",
    "width",
    "willChange",
    "wordBreak",
    "wordSpacing",
    "wordWrap",
    "writingMode",
    "zIndex",
    "zoom",
    "all",
    "animation",
    "background",
    "border",
    "borderBlockEnd",
    "borderBlockStart",
    "borderBottom",
    "borderColor",
    "borderImage",
    "borderInlineEnd",
    "borderInlineStart",
    "borderLeft",
    "borderRadius",
    "borderRight",
    "borderStyle",
    "borderTop",
    "borderWidth",
    "columnRule",
    "columns",
    "flex",
    "flexFlow",
    "font",
    "gap",
    "grid",
    "gridArea",
    "gridColumn",
    "gridRow",
    "gridTemplate",
    "lineClamp",
    "listStyle",
    "margin",
    "mask",
    "maskBorder",
    "motion",
    "offset",
    "outline",
    "padding",
    "placeItems",
    "textDecoration",
    "textEmphasis",
    "transition"
];
const SvgProperties = [
    "alignmentBaseline",
    "baselineShift",
    "clip",
    "clipPath",
    "clipRule",
    "color",
    "colorInterpolation",
    "colorRendering",
    "cursor",
    "direction",
    "display",
    "dominantBaseline",
    "fill",
    "fillOpacity",
    "fillRule",
    "filter",
    "floodColor",
    "floodOpacity",
    "font",
    "fontFamily",
    "fontSize",
    "fontSizeAdjust",
    "fontStretch",
    "fontStyle",
    "fontVariant",
    "fontWeight",
    "glyphOrientationVertical",
    "imageRendering",
    "letterSpacing",
    "lightingColor",
    "lineHeight",
    "marker",
    "markerEnd",
    "markerMid",
    "markerStart",
    "mask",
    "opacity",
    "overflow",
    "paintOrder",
    "pointerEvents",
    "shapeRendering",
    "stopColor",
    "stopOpacity",
    "stroke",
    "strokeDasharray",
    "strokeDashoffset",
    "strokeLinecap",
    "strokeLinejoin",
    "strokeMiterlimit",
    "strokeOpacity",
    "strokeWidth",
    "textAnchor",
    "textDecoration",
    "textRendering",
    "unicodeBidi",
    "vectorEffect",
    "visibility",
    "whiteSpace",
    "wordSpacing",
    "writingMode"
]
const commonProps = StandardProperties.concat(SvgProperties);
/**
 * get css stand props 
 */
export default <P extends {}>(a: P): P => pick(a, commonProps) as any as P

